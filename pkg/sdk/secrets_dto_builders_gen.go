// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateWithOAuthClientCredentialsFlowSecretRequest(
	name SchemaObjectIdentifier,
	SecurityIntegration AccountObjectIdentifier,
) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s := CreateWithOAuthClientCredentialsFlowSecretRequest{}
	s.name = name
	s.SecurityIntegration = SecurityIntegration
	return &s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithOrReplace(OrReplace bool) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithIfNotExists(IfNotExists bool) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithOauthScopes(OauthScopes []SecurityIntegrationScope) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.OauthScopes = OauthScopes
	return s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithComment(Comment string) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.Comment = &Comment
	return s
}

func NewCreateWithOAuthAuthorizationCodeFlowSecretRequest(
	name SchemaObjectIdentifier,
	OauthRefreshToken string,
	OauthRefreshTokenExpiryTime string,
	SecurityIntegration AccountObjectIdentifier,
) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s := CreateWithOAuthAuthorizationCodeFlowSecretRequest{}
	s.name = name
	s.OauthRefreshToken = OauthRefreshToken
	s.OauthRefreshTokenExpiryTime = OauthRefreshTokenExpiryTime
	s.SecurityIntegration = SecurityIntegration
	return &s
}

func (s *CreateWithOAuthAuthorizationCodeFlowSecretRequest) WithOrReplace(OrReplace bool) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateWithOAuthAuthorizationCodeFlowSecretRequest) WithIfNotExists(IfNotExists bool) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateWithOAuthAuthorizationCodeFlowSecretRequest) WithComment(Comment string) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s.Comment = &Comment
	return s
}

func NewCreateWithBasicAuthenticationSecretRequest(
	name SchemaObjectIdentifier,
	Username string,
	Password string,
) *CreateWithBasicAuthenticationSecretRequest {
	s := CreateWithBasicAuthenticationSecretRequest{}
	s.name = name
	s.Username = Username
	s.Password = Password
	return &s
}

func (s *CreateWithBasicAuthenticationSecretRequest) WithOrReplace(OrReplace bool) *CreateWithBasicAuthenticationSecretRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateWithBasicAuthenticationSecretRequest) WithIfNotExists(IfNotExists bool) *CreateWithBasicAuthenticationSecretRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateWithBasicAuthenticationSecretRequest) WithComment(Comment string) *CreateWithBasicAuthenticationSecretRequest {
	s.Comment = &Comment
	return s
}

func NewCreateWithGenericStringSecretRequest(
	name SchemaObjectIdentifier,
	SecretString string,
) *CreateWithGenericStringSecretRequest {
	s := CreateWithGenericStringSecretRequest{}
	s.name = name
	s.SecretString = SecretString
	return &s
}

func (s *CreateWithGenericStringSecretRequest) WithOrReplace(OrReplace bool) *CreateWithGenericStringSecretRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateWithGenericStringSecretRequest) WithIfNotExists(IfNotExists bool) *CreateWithGenericStringSecretRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateWithGenericStringSecretRequest) WithComment(Comment string) *CreateWithGenericStringSecretRequest {
	s.Comment = &Comment
	return s
}

func NewAlterSecretRequest(
	name SchemaObjectIdentifier,
) *AlterSecretRequest {
	s := AlterSecretRequest{}
	s.name = name
	return &s
}

func (s *AlterSecretRequest) WithIfExists(IfExists bool) *AlterSecretRequest {
	s.IfExists = &IfExists
	return s
}

func (s *AlterSecretRequest) WithSet(Set SecretSetRequest) *AlterSecretRequest {
	s.Set = &Set
	return s
}

func (s *AlterSecretRequest) WithUnset(Unset SecretUnsetRequest) *AlterSecretRequest {
	s.Unset = &Unset
	return s
}

func NewSecretSetRequest() *SecretSetRequest {
	return &SecretSetRequest{}
}

func (s *SecretSetRequest) WithComment(Comment string) *SecretSetRequest {
	s.Comment = &Comment
	return s
}

func (s *SecretSetRequest) WithOAuthScopes(OAuthScopes OAuthScopesRequest) *SecretSetRequest {
	s.OAuthScopes = &OAuthScopes
	return s
}

func (s *SecretSetRequest) WithOauthRefreshToken(OauthRefreshToken string) *SecretSetRequest {
	s.OauthRefreshToken = &OauthRefreshToken
	return s
}

func (s *SecretSetRequest) WithOauthRefreshTokenExpiryTime(OauthRefreshTokenExpiryTime string) *SecretSetRequest {
	s.OauthRefreshTokenExpiryTime = &OauthRefreshTokenExpiryTime
	return s
}

func (s *SecretSetRequest) WithUsername(Username string) *SecretSetRequest {
	s.Username = &Username
	return s
}

func (s *SecretSetRequest) WithPassword(Password string) *SecretSetRequest {
	s.Password = &Password
	return s
}

func (s *SecretSetRequest) WithSecretString(SecretString string) *SecretSetRequest {
	s.SecretString = &SecretString
	return s
}

func NewOAuthScopesRequest() *OAuthScopesRequest {
	return &OAuthScopesRequest{}
}

func (s *OAuthScopesRequest) WithOAuthScopes(OAuthScopes []SecurityIntegrationScope) *OAuthScopesRequest {
	s.OAuthScopes = OAuthScopes
	return s
}

func NewSecretUnsetRequest() *SecretUnsetRequest {
	return &SecretUnsetRequest{}
}

func (s *SecretUnsetRequest) WithUnsetComment(UnsetComment bool) *SecretUnsetRequest {
	s.UnsetComment = &UnsetComment
	return s
}
